{"version":3,"sources":["TicTacToe/Tic.js","App.js","index.js"],"names":["Tic","useState","turn","setTurn","Array","fill","cells","setCells","winner","setWinner","handleClick","num","squares","matrix","rows","cols","diags","combo","forEach","pattern","CheckWinner","alert","Cell","onClick","className","class","App","ReactDOM","render","document","getElementById"],"mappings":"qMA6GeA,EA1GH,WACR,MAAuBC,mBAAS,KAAhC,mBAAMC,EAAN,KAAYC,EAAZ,KACA,EAAyBF,mBAASG,MAAM,GAAGC,KAAK,KAAhD,mBAAMC,EAAN,KAAaC,EAAb,KACA,EAA2BN,qBAA3B,mBAAMO,EAAN,KAAcC,EAAd,KAuCMC,EAAc,SAACC,GACjB,GAAkB,KAAfL,EAAMK,GAAT,CAIA,IAAIC,EAAO,YAAON,GAEN,MAATJ,GACCU,EAAQD,GAAO,IACfR,EAAQ,OAERS,EAAQD,GAAO,IACfR,EAAQ,MAjDI,SAACS,GACjB,IAAIC,EAAS,CACTC,KAAK,CACD,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAETC,KAAK,CACD,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAETC,MAAM,CACF,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,KAKb,IAAI,IAAIC,KAASJ,EACbA,EAAOI,GAAOC,SAAQ,SAACC,GAES,KAAxBP,EAAQO,EAAQ,KACQ,KAAxBP,EAAQO,EAAQ,KACQ,KAAxBP,EAAQO,EAAQ,KAIhBP,EAAQO,EAAQ,MAAQP,EAAQO,EAAQ,KACxCP,EAAQO,EAAQ,MAAQP,EAAQO,EAAQ,KAExCV,EAAUG,EAAQO,EAAQ,QAqBtCC,CAAYR,GACZL,EAASK,QAdLS,MAAM,oBAuBRC,EAAO,SAAC,GAAW,IAAVX,EAAS,EAATA,IACX,OAAO,oBAAIY,QAAS,kBAAMb,EAAYC,IAA/B,SAAsCL,EAAMK,MAIvD,OAEI,sBAAKa,UAAU,YAAf,UACI,2CACWtB,EACP,kCACI,+BACI,cAACoB,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,OAEf,+BACI,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,OAEf,+BACI,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,aAItBH,GACG,qCACI,mCAAK,sBAAMiB,MAAM,SAAZ,SAAsBjB,IAA3B,oBACA,wBAAQe,QAAU,kBAnC9Bd,EAAU,WACVF,EAASH,MAAM,GAAGC,KAAK,MAkCX,gCCzFLqB,MATf,WAEE,OACE,8BACE,cAAC,EAAD,OCFNC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.599b2df2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport \"./Tic.css\";\r\n\r\nconst Tic = () => {\r\n    const[turn, setTurn] = useState(\"X\");\r\n    const[cells, setCells] = useState(Array(9).fill(\"\"));\r\n    const[winner, setWinner] = useState();\r\n    \r\n    const CheckWinner = (squares) => {\r\n        let matrix = {\r\n            rows:[\r\n                [0,1,2],\r\n                [3,4,5],\r\n                [6,7,8]\r\n            ],\r\n            cols:[\r\n                [0,3,6],\r\n                [1,4,7],\r\n                [2,5,8]\r\n            ],\r\n            diags:[\r\n                [0,4,8],\r\n                [2,4,6]\r\n            ]\r\n\r\n        };\r\n\r\n        for(let combo in matrix){\r\n            matrix[combo].forEach((pattern) =>{\r\n                if(\r\n                    squares[pattern[0]] === '' ||\r\n                    squares[pattern[1]] === '' ||\r\n                    squares[pattern[2]] === '' \r\n                ){\r\n                    //nothing\r\n                }else if(\r\n                    squares[pattern[0]] === squares[pattern[1]] &&\r\n                    squares[pattern[1]] === squares[pattern[2]]\r\n                ){\r\n                    setWinner(squares[pattern[0]])\r\n                }\r\n            });\r\n        };\r\n    };\r\n\r\n    const handleClick = (num) => {\r\n        if(cells[num] !== \"\"){\r\n            alert(\"already clicked\");\r\n            return;\r\n        }\r\n        let squares = [...cells];\r\n\r\n        if(turn === 'X'){\r\n            squares[num] = \"X\";\r\n            setTurn(\"O\");\r\n        }else{\r\n            squares[num] = \"O\";\r\n            setTurn(\"X\");\r\n        }\r\n\r\n        CheckWinner(squares);\r\n        setCells(squares);\r\n       \r\n    };\r\n\r\n    const handleRestart = () => {\r\n        setWinner(null);\r\n        setCells(Array(9).fill(''));\r\n    };\r\n\r\n    const Cell = ({num}) => {\r\n        return <td onClick={() => handleClick(num)}>{cells[num]}</td>\r\n    };\r\n\r\n\r\n    return (\r\n        \r\n        <div className=\"container\">\r\n            <table>\r\n                Turn: {turn}\r\n                <tbody>\r\n                    <tr>\r\n                        <Cell num={0} />\r\n                        <Cell num={1} />\r\n                        <Cell num={2} />\r\n                    </tr>\r\n                    <tr>\r\n                        <Cell num={3} />\r\n                        <Cell num={4} />\r\n                        <Cell num={5} />\r\n                    </tr>\r\n                    <tr>\r\n                        <Cell num={6} />\r\n                        <Cell num={7} />\r\n                        <Cell num={8} />\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            {winner && \r\n                <>\r\n                    <h1> <span class=\"winner\">{winner}</span> is the Winner</h1>\r\n                    <button onClick= {() => handleRestart()}>Play Again!</button>\r\n                </>\r\n            \r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tic;\r\n","\nimport Tic from './TicTacToe/Tic';\n\nfunction App(){\n \n  return (\n    <div >\n      <Tic />\n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}